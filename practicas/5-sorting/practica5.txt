///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

Ejercicio 1) Comparar la complejidad de los algoritmos de ordenamiento dados en la teórica para el caso en que el arreglo a ordenar se encuentre perfectamente ordenado de manera inversa a la deseada.

--

Insertion Sort: O(n^2)
Tree Sort: O(n logn)

Selection Sort: O(n^2)
Heap Sort: O(n logn)

Merge Sort: O(n logn)
Quick Sort: O(n logn)

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

Ejercicio 2) Imagine secuencias de naturales de la forma s = Concatenar (s', s''), donde s' es una secuencia ordenada de naturales y s'' es una secuencia de naturales elegidos al azar. Qué método utilizaría para ordenar s? Justificar. (Entiéndase que s' se encuentra ordenada de la manera deseada.)

--

Puedo ordenar la secuencia s'', con cualquier algoritmo eficiente (ej quicksort, heapsort, treesort) y luego mergear ambas partes en O(n). El costo total de hacer esto sería O("ordenar s''") + O("largo de s").

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

Ejercicio 3) Escribir un algoritmo que encuentre los k elementos más chicos de un arreglo de dimensión n, donde k ≤ n. ¿Cuál es su complejidad temporal? ¿A partir de qué valor de k es ventajoso ordenar el arreglo entero primero?

--

input: A arreglo de dimensión n

resultado = list // En B van a estar los resultados
min_heapify(A) // min-heapify in-place sobre A
for(i=0; i<k; i++){
	append(B, extract-min(A));
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

Ejercicio 4) Se tiene un conjunto de n secuencias {s_1, s_2, ... , s_n} en donde cada s_i (1 ≤ i ≤ n) es una secuencia ordenada de naturales. ¿Qué método utilizaría para obtener un arreglo que contenga todos los elementos de la unión de los s_i ordenados. Describirlo. Justificar.

--

0) Creo un arreglo vacío de tamaño igual a la suma de los tamaños de las secuencias (llamemos a este tamaño K).

1) Formo las tuplas T_i = (f_i, i, *s_i), en donde f_i es el primer elemento de s_i, para cada s_i (1 ≤ i ≤ n). Esto lo hago en O(n). Es claro que hay un orden estricto entre las distintas T_i, ya que aún suponiendo que todos los f_i sean iguales, cada T_i va a corresponderse a un índice i distinto.

2) Armo un heap con estas tuplas en O(n log n). Particularmente, el primer elemento del heap siempre va a tener al siguiente elemento que voy a agregar a la secuencia (pues dado que las secuencias están ordenadas, voy a querer agregar el menor/mayor de entre los primeros elementos de todas las secuencias.)

3) Mientras existan elementos en el heap, realizo:
	3.a) Hago pop() del primer elemento. O(log n)
	3.b) Inserto el f_i correspondiente en el array. O(1)
	3.c) Avanzo la secuencia s_i correspondiente, y si aún quedan elementos en ella, genero una nueva tupla T_i' = (f_i', i, *s_i), tal que f_i' es el siguiente elemento de s_i (es decir, al que acabo de avanzar). En caso de que la secuencia s_i haya quedado vacía, salteo el siguiente paso. O(1)
	3.d) Inserto la tupla T_i' en el heap. O(log n)

4) En total, voy a insertar todos los elementos de todas las secuencias, es decir K elementos, y cada paso me va a costar O(log n). El algoritmo va a tener una complejidad de O(K * log n).

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

Ejercicio 5) Se tiene un arreglo de n números naturales que se quiere ordenar por frecuencia, y en caso de igual frecuencia, por su valor. Por ejemplo, a partir del arreglo [1, 3, 1, 7, 2, 7, 1, 7, 3] se quiere obtener [1, 1, 1, 7, 7, 7, 3, 3, 2]. Describa un algoritmo que realice el ordenamiento descrito, utilizando las estructuras de datos intermedias que considere necesarias. Calcule el orden de complejidad temporal del algoritmo propuesto.

--

a) Ordeno el arreglo A en O(n log n) utilizando cualquier algoritmo de sorting eficiente (ej heap sort).

Ejemplo, dado A = [1, 3, 1, 7, 2, 7, 1, 7, 3], el resultado es A = [1, 1, 1, 2, 3, 3, 7, 7, 7]

b) Genero un arreglo cantidades de tamaño máximo n, que va a tener tuplas (c_i, n_i), en donde n_i es un núḿero y c_i es la cantidad de veces que aparece.

c) Itero sobre el arreglo A con dos índices i1, i2, en donde voy a ir avanzando i2 hasta encontrar un número distinto a i1, y luego comenzando con i1=i2, definiendo intervalos para cada número, contando la cantidad de apariciones de cada uno como la resta entre ambos índices. Ejemplo, en A:
	* comienzo con i2=i1=k=0.
	* mientras i2 != largo(A)
		* mientras A[i2] == A[i1]: i2++
		* cantidades[k] = i2-i1 = 3
		* k++

Usando A, el arreglo me quedaría al final cantidades = [(3,1), (1,2), (2,3), (3,7)]

d) Al final del punto anterior, voy a tener un arreglo en donde voy a tener tuplas con la frecuencia correspondiente para cada elemento. Ordeno este array en O(n log n) utilizando cualquier algoritmo de sorting eficiente (ej, heap sort). Defino la comparación de dos tuplas como T_a < T_b ssi { (T_a[0] > T_b[0]) or (T_a[0] == T_b[0] and T_a[1] < T_b[1]) }. Usando el ejemplo, el arreglo me quedaría ordenado así:
cantidades = [(3,1), (3,7), (2,3), (1,2)]

e) Escribo sobre A el resultado, que sería iterar sobre cantidades y escribir la cantidad de elementos correspondiente en el orden en que se encuentran allí. En el ejemplo, esto sería, tres 1, tres 7, dos 3, y un 2. Me quedaría A=[1, 1, 1, 7, 7, 7, 3, 3, 2].

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

Ejercicio 6)
Sea A[1 . . . n] un arreglo que contiene n números naturales. Diremos que un rango de posiciones [i . . . j], con 1 ≤ i ≤ j ≤ n, contiene una escalera en A si valen las siguientes dos propiedades:

	1. (∀ k : nat) i ≤ k < j ⇒ A[k + 1] = A[k] + 1 (esto es, los elementos no sólo están ordenados en forma creciente, sino que además el siguiente vale exactamente uno más que el anterior).

	2. Si 1 < i entonces A[i] != A[i − 1] + 1 y si j < n entonces A[j + 1] != A[j] + 1 (la propiedad es maximal, es decir que el rango no puede extenderse sin que deje de ser una escalera según el punto anterior).

Se puede verificar fácilmente que cualquier arreglo puede ser descompuesto de manera única como una secuencia de escaleras. Se pide escribir un algoritmo para reposicionar las escaleras del arreglo original, de modo que las mismas se presenten en orden decreciente de longitud y, para las de la misma longitud, se presenten ordenadas en forma creciente por el primer valor de la escalera.

El resultado debe ser del mismo tipo de datos que el arreglo original. Calcule la complejidad temporal de la solución propuesta, y justifique dicho cálculo.

Por ejemplo, el siguiente arreglo
5 6 8 9 10 7 8 9 20 15
debería ser transformado a
7 8 9 | 8 9 10 | 5 6 | 15 | 20

Ayuda: se aconseja comenzar el ejercicio con una clara descripción en castellano de la estrategia que propone para resolver el problema.

--

TODO;

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

Ejercicio 7) Suponga que su objetivo es ordenar arreglos de naturales (sobre los que no se conoce nada en especial), y que cuenta con una implementación de árboles AVL. Se le ocurre alguna forma de aprovecharla? Conciba un algoritmo que llamaremos AVL Sort. Cuál es el mejor orden de complejidad que puede lograr?
Ayuda: debería hallar un algoritmo que requiera tiempo O(n log d) en peor caso, donde n es la cantidad de elementos a ordenar y d es la cantidad de elementos distintos. Para inspirarse, piense en Heap Sort (no en los detalles puntuales, sino en la idea general de este último).
Justifique por qué su algoritmo cumple con lo pedido.

--

Pongo todos los elementos en un AVL. Luego devuelvo el resultado de recorrerlos de menor a mayor (o mayor a menor, según el caso).

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

Ejercicio 8) Se tienen dos arreglos de números naturales, A[1..n] y B[1..m]. Nada en especial se sabe de B, pero A tiene n' secuencias de números repetidos continuos (por ejemplo A = [3333311118888877771145555], n' = 7). Se sabe además que n' es mucho más chico que n. Se desea obtener un arreglo C de tamaño n + m que contenga los elementos de A y B, ordenados.

	1. Escriba un algoritmo para obtener C que tenga complejidad temporal O(n + (n' + m) log(n' + m)) en el peor caso. Justifique la complejidad de su algoritmo.
	2. Suponiendo que todos los elementos de B se encuentran en A, escriba un algoritmo para obtener C que tenga complejidad temporal O(n + n' (log(n') + m)) en el peor caso y que utilice solamente arreglos como estructuras auxiliares. Justifique la complejidad de su algoritmo.

--

TODO;

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

Ejercicio 9) Considere la siguiente estructura para guardar las notas de un alumno de un curso:

--------------------------------------------------------------
alumno es tupla<nombre: string, sexo: FM, puntaje: Nota>
donde FM es enum{masc, fem} y Nota es un nat no mayor que 10.
--------------------------------------------------------------

Se necesita ordenar un arreglo(alumno) de forma tal que todas las mujeres aparezcan al inicio de la tabla según un orden creciente de notas y todos los varones aparezcan al final de la tabla también ordenados de manera creciente respecto de su puntaje, como muestra en el siguiente ejemplo:

---------------------------------------------
|		Entrada			|		Salida		|
|	Ana 	F 	10		|	Rita 	F 	6	|
|	Juan 	M 	6		|	Paula 	F 	7	|
|	Rita 	F 	6		|	Ana 	F 	10	|
|	Paula 	F 	7 		|	Juan 	M 	6	|
|	Jose 	M 	7		|	Jose 	M 	7	|
|	Pedro 	M 	8 		|	Pedro 	M 	8	|
---------------------------------------------

	1. Proponer un algoritmo de ordenamiento ordenaPlanilla(inout p: planilla) para resolver el problema descripto anteriormente y cuya complejidad temporal sea O(n) en el peor caso, donde n es la cantidad de elementos del arreglo. Justificar.

	2. Supóngase ahora que la planilla original ya se encuentra ordenada alfabéticamente por nombre. Puede asegurar que si existen dos o más mujeres con igual nota, entonces las mismas aparecerán en orden alfabético en la planilla ordenada? Justifique su respuesta.

	3. La cota O(n) contradice el “lower bound” sobre la complejidad temporal en el peor caso de los algoritmos de ordenamiento? (El Teorema de “lower bound” establece que todo algoritmo general de ordenamiento tiene complejidad temporal Ω(n log n).) Explique su respuesta.

--

TODO;

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

Ejercicio 10)  Suponer que se tiene un hipotético algoritmo de “casi” ordenamiento casiSort que dado un arreglo A de n elementos, ordena n/2 elementos arbitrarios colocándolos en la mitad izquierda del arreglo A[1 ... n/2]. Los elementos no ordenados de A se colocan en la mitad derecha A[n/2 + 1 ... n].
	
	1. Describir un algoritmo de ordenamiento para arreglos de n elementos (con n potencia de 2) utilizando el algoritmo casiSort.
	
	2. Obtener la complejidad temporal en el peor caso del algoritmo dado en el punto anterior, suponiendo que casiSort tiene complejidad temporal Θ(n).

	3. Cree que es posible diseñar un algoritmo para casiSort que realice O(n) comparaciones en el peor caso? Justifique su respuesta.

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

Ejercicio 11) Sea A[1 ... n] un arreglo de números naturales en rango (cada elemento está en el rango de 1 a k, siendo k alguna constante). Diseñe un algoritmo que ordene esta clase de arreglos en tiempo O(n). Demuestre que la
cota temporal es correcta.

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

Ejercicio 12) Se desea ordenar los datos generados por un sensor industrial que monitorea la presencia de una sustancia en un proceso químico. Cada una de estas mediciones es un número entero positivo. Dada la naturaleza del proceso se sabe que, dada una secuencia de n mediciones, a lo sumo piso[√n] valores están fuera del rango [20, 40].

Proponer un algoritmo O(n) que permita ordenar ascendentemente una secuencia de mediciones y justificar la complejidad del algoritmo propuesto.

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

Ejercicio 13) Se tiene un arreglo A[1 ... n] de T, donde T son tuplas < c_1 : nat, c2 : string[l]>, y los string[l] son strings de longitud máxima l. Si bien la comparación de dos nat toma O(1), la comparación de dos string[l] toma
O(l). Se desea ordenar A en base a la segunda componente y luego la primera.

	1. Escriba un algoritmo que tenga complejidad temporal O(n*l + n log(n)) en el peor caso. Justifique la complejidad de su algoritmo.

	2. Suponiendo que los naturales de la primer componente están acotados, adapte su algoritmo para que tenga complejidad temporal O(nl) en el peor caso. Justifique la complejidad de su algoritmo.

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

Ejercicio 14) Se tiene un arreglo A de n números naturales y un entero k. Se desea obtener un arreglo B ordenado de n × k naturales que contenga los elementos de A multiplicados por cada entero entre 1 y k, es decir, para cada 1 ≤ i ≤ n y 1 ≤ j ≤ k se debe incluir en la salida el elemento j × A[i]. Notar que podría haber repeticiones en la entrada y en la salida.

	a) Implementar la función ordenarMultiplos(in A: arreglo(nat), in k: nat) → arreglo(nat) que resuelve el problema planteado. La función debe ser de tiempo O(nk log n), en donde n = tam(A).

	b) Calcular y justificar la complejidad del algoritmo propuesto.

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

Ejercicio 15) Dado un conjunto de naturales, diremos que un agujero es un natural x tal que el conjunto no contiene a x y sí contiene algún elemento menor que x y algún elemento mayor que x.

Diseñar un algoritmo que, dado un arreglo de n naturales, diga si existe algún agujero en el conjunto de los naturales que aparecen en el arreglo. Notar que el arreglo de entrada podría contener elementos repetidos, pero en la vista de conjunto, no es relevante la cantidad de repeticiones.

	a) Implementar la función tieneAgujero?(in A: arreglo(nat)) → bool que resuelve el problema planteado. La función debe ser de tiempo lineal en la cantidad de elementos de la entrada, es decir, O(n), dónde n = tam(A).

	b) Calcular y justificar la complejidad del algoritmo propuesto.

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

Ejercicio 16) Se tiene un arreglo A de n números naturales. Sea m := max{A[i] : 1 ≤ i ≤ n} el m´aximo del arreglo. Se desea dar un algoritmo que ordene el arreglo en O(n log m), utilizando únicamente arreglos y variables ordinarias
(i.e., sin utilizar listas enlazadas, árboles u otras estructuras con punteros).

	a) Implementar la función raroSort(in A: arreglo(nat)) → bool que resuelve el problema planteado. La función debe ser de tiempo O(n log m), donde n = tam(A) y m = max{A[i] : 1 ≤ i ≤ n}.

	b) Calcular y justificar la complejidad del algoritmo propuesto.

	c) Hay al menos 3 formas de resolver este ejercicio, pensar las que se puedan, discutir luego con los compañeros las que encontraron ellos y si hace falta, consultar.

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////