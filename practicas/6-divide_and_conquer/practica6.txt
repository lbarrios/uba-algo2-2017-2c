Ejercicio 1)
Escriba un algoritmo con dividir y conquistar que determine si un arreglo de tamaño potencia de 2 es más a la izquierda, donde “más a la izquierda” significa que:

	* La suma de los elementos de la mitad izquierda superan los de la mitad derecha.
	* Cada una de las mitades es a su vez “más a la izquierda”.

Por ejemplo, el arreglo [8, 6, 7, 4, 5, 1, 3, 2] es “más a la izquierda”, pero [8, 4, 7, 6, 5, 1, 3, 2] no lo es. Intente que su solución aproveche la técnica de modo que complejidad del algoritmo sea estrictamente menor a O(n^2).

--

El algoritmo toma un arreglo y devuelve un booleano indicando si es "más a la izquierda".
	* Caso base: arreglo A de 2 elementos, devuelve A[0]>A[1]. O(1)
	* Caso recursivo: arreglo A de n = 2^i elementos, devuelve sum de A[0...2^(i-1)) > sum de A[2^(i-1)...2^i). O(n)


T es un tipo generico con relacion de orden
esMasALaIzquierda( in A: arreglo(T) ) -> res: bool
	var izquierdaMayorDerecha: bool
		arregloIzquierda: arreglo de T
		arregloDerecha: arreglo de T
		sumaIzquierda: int
		sumaDerecha: int
		medio: nat

	if largo(A)=2 then									" O(1) "
		res <- a[0] > a[1]								" O(1) "
	end if

	medio <- largo(A) / 2								" O(1) "
	arrregloIzquierda <- crearArreglo(medio)			" O(medio) "
	arregloDerecha <- crearArreglo(medio)				" O(medio) "

	for i <- 0 to medio do 								" O(medio * copy(T)) "
		arregloIzquierda[i] <- A[i]						" O(copy(T)) "
	end for

	for i <- 0 to medio do 								" O(medio * copy(T)) "
		arregloDerecha[i] <- A[medio+i]					" O(copy(T)) "
	end for

	sumaIzquierda <- sum(arregloDerecha)				" O(medio) "
	sumaDerecha <- sum(arregloDerecha)					" O(medio) "

	var resIzq: bool
		resDer: bool
		resSum: bool

	resIzq <- esMasALaIzquierda( arregloIzquierda )		" O(T(medio)) "
	resDer <- esMasALaIzquierda( arregloDerecha )		" O(T(medio)) "
	resSum <- mayorA( sumaIzquierda, sumaDerecha )		" O(1) "

	res <- resSum ^ resIzq ^ resDer						" O(1) "

Ecuación de recurrencia del algoritmo implementado:
	T(n) = 2*T(n/2) + n
	T(2) = 1

La complejidad del algoritmo implementado se puede analizar mediante teorema maestro.
Según el teorema maestro, la ecuación de recurrencia debe cumplir con la forma:
	T(n) = a * T(n/b) + f(n)

Se verifica que cumple con la forma, tomando los siguientes parámetros: 
	a = 2
	b = 2
	c = log_2 (2) = 1
	f(n) = Θ(n) = Θ(n^c * log^k (n)), con k = 0

f(n) cumple la forma para el caso 2 del teorema maestro.

Luego, T(n) = Θ(n^c * log^k+1 (n)) = Θ(n^1 log^1(n)) = Θ(n log n), que es estrictamente menor que O(n^2).